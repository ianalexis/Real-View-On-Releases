# Workflow para compilar el proyecto RealViewOn con MSBuild
# Este workflow compila el proyecto C++ para arquitecturas x86 y x64

name: Build RealViewOn

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  SOLUTION_FILE_PATH: RealViewOn.sln
  BUILD_CONFIGURATION: Release

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Setup Visual Studio components
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: x64

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          rtmidi/lib/
          midifile/
        key: ${{ runner.os }}-deps-${{ hashFiles('**/rtmidi/**', '**/midifile/**') }}

    - name: Build x64
      run: |
        msbuild ${{ env.SOLUTION_FILE_PATH }} `
          /p:Configuration=${{ env.BUILD_CONFIGURATION }} `
          /p:Platform=x64 `
          /p:PlatformToolset=ClangCL `
          /p:WindowsTargetPlatformVersion=10.0.22621.0 `
          /p:UseMultiToolTask=true `
          /p:EnforceProcessCountAcrossBuilds=true `
          /maxcpucount `
          /verbosity:minimal

    - name: Test executable exists
      run: |
        $exePath = "x64\Release\RealViewOn.exe"
        
        if (Test-Path $exePath) {
          Write-Host "‚úÖ Executable found: $exePath"
          Get-Item $exePath | Select-Object Name, Length, LastWriteTime
        } else {
          Write-Host "‚ùå Executable not found: $exePath"
          exit 1
        }

    - name: Compress with UPX
      run: |
        # Comprimir con UPX si existe
        if (Test-Path "tools\upx.exe") {
          Write-Host "üóúÔ∏è Comprimiendo con UPX..."
          $originalSize = (Get-Item "x64\Release\RealViewOn.exe").Length
          Write-Host "Tama√±o original: $([math]::Round($originalSize/1MB, 2)) MB"
          
          & ".\tools\upx.exe" --ultra-brute "x64\Release\RealViewOn.exe"
          
          if ($LASTEXITCODE -eq 0) {
            $compressedSize = (Get-Item "x64\Release\RealViewOn.exe").Length
            $compressionRatio = [math]::Round((($originalSize - $compressedSize) / $originalSize) * 100, 1)
            Write-Host "‚úÖ Compresi√≥n UPX completada"
            Write-Host "Tama√±o comprimido: $([math]::Round($compressedSize/1MB, 2)) MB"
            Write-Host "Reducci√≥n: $compressionRatio%"
          } else {
            Write-Host "‚ö†Ô∏è Error en compresi√≥n UPX, continuando sin comprimir"
          }
        } else {
          Write-Host "‚ö†Ô∏è UPX no encontrado, saltando compresi√≥n"
        }

    - name: Get file version
      id: get_version
      run: |
        $exePath = "x64\Release\RealViewOn.exe"
        try {
          $versionInfo = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($exePath)
          $fileVersion = $versionInfo.FileVersion
          $productVersion = $versionInfo.ProductVersion
          
          # Usar ProductVersion si existe, si no FileVersion
          $version = if ($productVersion) { $productVersion } else { $fileVersion }
          
          # Si no hay versi√≥n o es 0.0.0.0, usar fecha, hora y commit SHA corto
          if (-not $version -or $version -eq "0.0.0.0") {
            $shortSha = "${{ github.sha }}".Substring(0, 7)
            $version = "$(Get-Date -Format 'yyyy.MM.dd.HHmm')-$shortSha"
          }
          
          Write-Host "üìã Versi√≥n detectada: $version"
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "FILE_VERSION=$fileVersion" >> $env:GITHUB_OUTPUT
          echo "PRODUCT_VERSION=$productVersion" >> $env:GITHUB_OUTPUT
        } catch {
          Write-Host "‚ö†Ô∏è No se pudo obtener la versi√≥n del archivo, usando timestamp y commit"
          $shortSha = "${{ github.sha }}".Substring(0, 7)
          $version = "$(Get-Date -Format 'yyyy.MM.dd.HHmm')-$shortSha"
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        }

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: RealViewOn-x64-${{ env.BUILD_CONFIGURATION }}
        path: |
          x64/Release/RealViewOn.exe
          x64/Release/*.pdb
        if-no-files-found: ignore

    - name: Check if release exists
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      id: check_release
      run: |
        $tagName = "v${{ steps.get_version.outputs.VERSION }}"
        Write-Host "üîç Verificando si existe el release: $tagName"
        
        try {
          $headers = @{
            'Authorization' = 'token ${{ secrets.GITHUB_TOKEN }}'
            'Accept' = 'application/vnd.github.v3+json'
          }
          
          $response = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/tags/$tagName" -Headers $headers -Method Get
          Write-Host "‚ö†Ô∏è El release $tagName ya existe, se actualizar√°"
          echo "EXISTS=true" >> $env:GITHUB_OUTPUT
          echo "RELEASE_ID=$($response.id)" >> $env:GITHUB_OUTPUT
          echo "UPLOAD_URL=$($response.upload_url)" >> $env:GITHUB_OUTPUT
        } catch {
          if ($_.Exception.Response.StatusCode -eq 404) {
            Write-Host "‚úÖ El release $tagName no existe, se crear√° uno nuevo"
            echo "EXISTS=false" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "‚ùå Error al verificar el release: $($_.Exception.Message)"
            throw
          }
        }

    - name: Create GitHub Pre-Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.check_release.outputs.EXISTS == 'false'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        release_name: 'RealViewOn v${{ steps.get_version.outputs.VERSION }}'
        body: |
          üöÄ **RealViewOn Release v${{ steps.get_version.outputs.VERSION }}**
          
          **Version Info:**
          - Version: `${{ steps.get_version.outputs.VERSION }}`
          - File Version: `${{ steps.get_version.outputs.FILE_VERSION }}`
          - Product Version: `${{ steps.get_version.outputs.PRODUCT_VERSION }}`
          - Build Number: `${{ github.run_number }}`
          
          **Build Details:**
          - Commit: `${{ github.sha }}`
          - Branch: `${{ github.ref_name }}`
          - Build Date: `${{ github.event.head_commit.timestamp }}`
          
          **Changes:**
          ${{ github.event.head_commit.message }}
          
          **Files included:**
          - `RealViewOn.exe` - Main executable (UPX compressed)
          
          **Installation:**
          1. Download `RealViewOn.exe`
          2. Run the executable
          
          ---
          *This is an automated pre-release generated from the latest commit.*
        draft: false
        prerelease: true
      id: create_release

    - name: Upload Release Asset
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        $uploadUrl = if ("${{ steps.check_release.outputs.EXISTS }}" -eq "true") {
          "${{ steps.check_release.outputs.UPLOAD_URL }}"
        } else {
          "${{ steps.create_release.outputs.upload_url }}"
        }
        
        Write-Host "üì§ Subiendo asset a: $uploadUrl"
        
        $headers = @{
          'Authorization' = 'token ${{ secrets.GITHUB_TOKEN }}'
          'Content-Type' = 'application/octet-stream'
        }
        
        # Remover {?name,label} del upload_url si est√° presente
        $uploadUrl = $uploadUrl -replace '\{\?.*\}', ''
        $uploadUrl = "$uploadUrl?name=RealViewOn.exe"
        
        try {
          $filePath = "x64\Release\RealViewOn.exe"
          $fileBytes = [System.IO.File]::ReadAllBytes($filePath)
          
          $response = Invoke-RestMethod -Uri $uploadUrl -Method Post -Headers $headers -Body $fileBytes
          Write-Host "‚úÖ Asset subido exitosamente: $($response.name)"
        } catch {
          Write-Host "‚ùå Error al subir asset: $($_.Exception.Message)"
          throw
        }



# Workflow para compilar el proyecto RealViewOn con MSBuild
# Este workflow compila el proyecto C++ para arquitecturas x86 y x64

name: Build RealViewOn

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  SOLUTION_FILE_PATH: RealViewOn.sln
  BUILD_CONFIGURATION: Release

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Setup Visual Studio components
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: x64

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          rtmidi/lib/
          midifile/
        key: ${{ runner.os }}-deps-${{ hashFiles('**/rtmidi/**', '**/midifile/**') }}

    - name: Build x64
      run: |
        msbuild ${{ env.SOLUTION_FILE_PATH }} `
          /p:Configuration=${{ env.BUILD_CONFIGURATION }} `
          /p:Platform=x64 `
          /p:PlatformToolset=ClangCL `
          /p:WindowsTargetPlatformVersion=10.0.22621.0 `
          /p:UseMultiToolTask=true `
          /p:EnforceProcessCountAcrossBuilds=true `
          /maxcpucount `
          /verbosity:minimal

    - name: Test executable exists
      run: |
        $exePath = "x64\Release\RealViewOn.exe"
        
        if (Test-Path $exePath) {
          Write-Host "✅ Executable found: $exePath"
          Get-Item $exePath | Select-Object Name, Length, LastWriteTime
        } else {
          Write-Host "❌ Executable not found: $exePath"
          exit 1
        }

    - name: Compress with UPX
      run: |
        # Comprimir con UPX si existe
        if (Test-Path "tools\upx.exe") {
          Write-Host "🗜️ Comprimiendo con UPX..."
          $originalSize = (Get-Item "x64\Release\RealViewOn.exe").Length
          Write-Host "Tamaño original: $([math]::Round($originalSize/1MB, 2)) MB"
          
          & ".\tools\upx.exe" --ultra-brute "x64\Release\RealViewOn.exe"
          
          if ($LASTEXITCODE -eq 0) {
            $compressedSize = (Get-Item "x64\Release\RealViewOn.exe").Length
            $compressionRatio = [math]::Round((($originalSize - $compressedSize) / $originalSize) * 100, 1)
            Write-Host "✅ Compresión UPX completada"
            Write-Host "Tamaño comprimido: $([math]::Round($compressedSize/1MB, 2)) MB"
            Write-Host "Reducción: $compressionRatio%"
          } else {
            Write-Host "⚠️ Error en compresión UPX, continuando sin comprimir"
          }
        } else {
          Write-Host "⚠️ UPX no encontrado, saltando compresión"
        }

    - name: Get file version
      id: get_version
      run: |
        $exePath = "x64\Release\RealViewOn.exe"
        try {
          $versionInfo = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($exePath)
          $fileVersion = $versionInfo.FileVersion
          $productVersion = $versionInfo.ProductVersion
          
          # Usar ProductVersion si existe, si no FileVersion
          $version = if ($productVersion) { $productVersion } else { $fileVersion }
          
          # Si no hay versión, usar fecha y hora
          if (-not $version -or $version -eq "0.0.0.0") {
            $version = "$(Get-Date -Format 'yyyy.MM.dd.HHmm')"
          }
          
          Write-Host "📋 Versión detectada: $version"
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "FILE_VERSION=$fileVersion" >> $env:GITHUB_OUTPUT
          echo "PRODUCT_VERSION=$productVersion" >> $env:GITHUB_OUTPUT
        } catch {
          Write-Host "⚠️ No se pudo obtener la versión del archivo, usando timestamp"
          $version = "$(Get-Date -Format 'yyyy.MM.dd.HHmm')"
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        }

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: RealViewOn-x64-${{ env.BUILD_CONFIGURATION }}
        path: |
          x64/Release/RealViewOn.exe
          x64/Release/*.pdb
        if-no-files-found: ignore

    - name: Create GitHub Pre-Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        release_name: 'RealViewOn v${{ steps.get_version.outputs.VERSION }}'
        body: |
          🚀 **RealViewOn Release v${{ steps.get_version.outputs.VERSION }}**
          
          **Version Info:**
          - Version: `${{ steps.get_version.outputs.VERSION }}`
          - File Version: `${{ steps.get_version.outputs.FILE_VERSION }}`
          - Product Version: `${{ steps.get_version.outputs.PRODUCT_VERSION }}`
          - Build Number: `${{ github.run_number }}`
          
          **Build Details:**
          - Commit: `${{ github.sha }}`
          - Branch: `${{ github.ref_name }}`
          - Build Date: `${{ github.event.head_commit.timestamp }}`
          
          **Changes:**
          ${{ github.event.head_commit.message }}
          
          **Files included:**
          - `RealViewOn.exe` - Main executable (UPX compressed)
          
          **Installation:**
          1. Download `RealViewOn.exe`
          2. Run the executable
          
          ---
          *This is an automated pre-release generated from the latest commit.*
        draft: false
        prerelease: true
      id: create_release

    - name: Upload Release Asset
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: x64/Release/RealViewOn.exe
        asset_name: RealViewOn.exe
        asset_content_type: application/octet-stream



# Workflow para compilar el proyecto RealViewOn con MSBuild

name: Build RealViewOn

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

env:
  SOLUTION_FILE_PATH: RealViewOn.sln
  BUILD_CONFIGURATION: Release

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Setup Visual Studio components
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            rtmidi/lib/
            midifile/
          key: ${{ runner.os }}-deps-${{ hashFiles('**/rtmidi/**', '**/midifile/**') }}

      - name: Build x64
        run: |
          msbuild ${{ env.SOLUTION_FILE_PATH }} `
            /p:Configuration=${{ env.BUILD_CONFIGURATION }} `
            /p:Platform=x64 `
            /p:PlatformToolset=ClangCL `
            /p:WindowsTargetPlatformVersion=10.0.22621.0 `
            /p:UseMultiToolTask=true `
            /p:EnforceProcessCountAcrossBuilds=true `
            /maxcpucount `
            /verbosity:minimal

      - name: Test executable exists
        run: |
          $exePath = "x64\Release\RealViewOn.exe"

          if (Test-Path $exePath) {
            Write-Host "‚úÖ Executable found: $exePath"
            Get-Item $exePath | Select-Object Name, Length, LastWriteTime
          } else {
            Write-Host "‚ùå Executable not found: $exePath"
            exit 1
          }

      - name: Compress with UPX
        run: |
          # Comprimir con UPX si existe
          if (Test-Path "tools\upx.exe") {
            Write-Host "üóúÔ∏è Comprimiendo con UPX..."
            $originalSize = (Get-Item "x64\Release\RealViewOn.exe").Length
            Write-Host "Tama√±o original: $([math]::Round($originalSize/1MB, 2)) MB"

            & ".\tools\upx.exe" --ultra-brute "x64\Release\RealViewOn.exe"

            if ($LASTEXITCODE -eq 0) {
              $compressedSize = (Get-Item "x64\Release\RealViewOn.exe").Length
              $compressionRatio = [math]::Round((($originalSize - $compressedSize) / $originalSize) * 100, 1)
              Write-Host "‚úÖ Compresi√≥n UPX completada"
              Write-Host "Tama√±o comprimido: $([math]::Round($compressedSize/1MB, 2)) MB"
              Write-Host "Reducci√≥n: $compressionRatio%"
            } else {
              Write-Host "‚ö†Ô∏è Error en compresi√≥n UPX, continuando sin comprimir"
            }
          } else {
            Write-Host "‚ö†Ô∏è UPX no encontrado, saltando compresi√≥n"
          }

      - name: Get file version
        id: get_version
        run: |
          $exePath = "x64\Release\RealViewOn.exe"
          $versionFile = "include\Version.h"

          # Leer el archivo Version.h para obtener FILE_VERSION_STABLE
          $isStable = $false
          if (Test-Path $versionFile) {
            $versionContent = Get-Content $versionFile -Raw
            if ($versionContent -match '#define FILE_VERSION_STABLE (\d+)') {
              $stableValue = [int]$matches[1]
              $isStable = ($stableValue -eq 1)
              Write-Host "üìã FILE_VERSION_STABLE: $stableValue ($(if($isStable) { 'Stable' } else { 'PreRelease' }))"
            }
          }

          try {
            $versionInfo = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($exePath)
            $fileVersion = $versionInfo.FileVersion
            $productVersion = $versionInfo.ProductVersion

            # Usar ProductVersion si existe, si no FileVersion
            $version = if ($productVersion) { $productVersion } else { $fileVersion }

            # Si no hay versi√≥n o es 0.0.0.0, usar fecha, hora y commit SHA corto
            if (-not $version -or $version -eq "0.0.0.0") {
              $shortSha = "${{ github.sha }}".Substring(0, 7)
              $version = "$(Get-Date -Format 'yyyy.MM.dd.HHmm')-$shortSha"
            }

            Write-Host "üìã Versi√≥n detectada: $version"
            echo "VERSION=$version" >> $env:GITHUB_OUTPUT
            echo "IS_STABLE=$isStable" >> $env:GITHUB_OUTPUT
          } catch {
            Write-Host "‚ö†Ô∏è No se pudo obtener la versi√≥n del archivo, usando timestamp y commit"
            $shortSha = "${{ github.sha }}".Substring(0, 7)
            $version = "$(Get-Date -Format 'yyyy.MM.dd.HHmm')-$shortSha"
            echo "VERSION=$version" >> $env:GITHUB_OUTPUT
            echo "IS_STABLE=$isStable" >> $env:GITHUB_OUTPUT
          }

      - name: Get changelog since last release
        id: get_changelog
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          Write-Host "üìã Obteniendo changelog desde el √∫ltimo release..."

          # Obtener el √∫ltimo release
          try {
            $headers = @{
              'Authorization' = 'token ${{ secrets.GITHUB_TOKEN }}'
              'Accept' = 'application/vnd.github.v3+json'
            }

            $releases = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases" -Headers $headers -Method Get
            $lastRelease = $releases | Where-Object { $_.tag_name -ne "v${{ steps.get_version.outputs.VERSION }}" } | Select-Object -First 1

            if ($lastRelease) {
              $lastTag = $lastRelease.tag_name
              Write-Host "üìã √öltimo release encontrado: $lastTag"

              # Obtener commits desde el √∫ltimo release
              $commits = git log --oneline --pretty=format:"%s" "$lastTag..HEAD"

              if ($commits -and $commits.Length -gt 0) {
                # Filtrar y formatear commits
                $validCommits = @()
                foreach ($commit in $commits) {
                  if ($commit -and $commit.Trim() -ne "") {
                    $cleanCommit = $commit.Trim()
                    # Escapar caracteres especiales
                    $cleanCommit = $cleanCommit -replace '"', '\"'
                    $cleanCommit = $cleanCommit -replace '`', '\`'
                    $validCommits += "- $cleanCommit"
                  }
                }

                if ($validCommits.Length -gt 0) {
                  $changelogText = $validCommits -join "`n"
                  Write-Host "üìã Changelog generado con $($validCommits.Length) commits"
                } else {
                  $changelogText = "- ${{ github.event.head_commit.message }}"
                  Write-Host "üìã No hay commits v√°lidos, usando commit actual"
                }
              } else {
                $changelogText = "- ${{ github.event.head_commit.message }}"
                Write-Host "üìã No hay commits nuevos, usando commit actual"
              }
            } else {
              Write-Host "üìã No se encontr√≥ release anterior, usando commit actual"
              $changelogText = "- ${{ github.event.head_commit.message }}"
            }

            # Limpiar el changelog text para evitar problemas con caracteres especiales
            $changelogText = $changelogText -replace "`r`n", "`n"
            $changelogText = $changelogText -replace "`r", "`n"

            # Escribir el changelog usando un m√©todo m√°s seguro
            $changelogPath = "changelog_temp.txt"
            $changelogText | Out-File -FilePath $changelogPath -Encoding utf8 -NoNewline
            $changelogContent = Get-Content -Path $changelogPath -Raw
            Remove-Item -Path $changelogPath -Force

            echo "CHANGELOG<<EOF" >> $env:GITHUB_OUTPUT
            echo $changelogContent >> $env:GITHUB_OUTPUT
            echo "EOF" >> $env:GITHUB_OUTPUT

          } catch {
            Write-Host "‚ö†Ô∏è Error al obtener changelog: $($_.Exception.Message)"
            Write-Host "üìã Usando commit actual como fallback"
            $fallbackText = "- ${{ github.event.head_commit.message }}"
            echo "CHANGELOG<<EOF" >> $env:GITHUB_OUTPUT
            echo $fallbackText >> $env:GITHUB_OUTPUT
            echo "EOF" >> $env:GITHUB_OUTPUT
          }

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: RealViewOn-x64-${{ env.BUILD_CONFIGURATION }}
          path: |
            x64/Release/RealViewOn.exe
            x64/Release/*.pdb
          if-no-files-found: ignore

      - name: Check if release exists
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: check_release
        run: |
          $tagName = "v${{ steps.get_version.outputs.VERSION }}"
          Write-Host "üîç Verificando si existe el release: $tagName"

          try {
            $headers = @{
              'Authorization' = 'token ${{ secrets.GITHUB_TOKEN }}'
              'Accept' = 'application/vnd.github.v3+json'
            }

            $response = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/tags/$tagName" -Headers $headers -Method Get
            Write-Host "‚ö†Ô∏è El release $tagName ya existe (ID: $($response.id))"

            # Buscar si existe un asset con el mismo nombre
            $existingAsset = $response.assets | Where-Object { $_.name -eq "RealViewOn.exe" }
            if ($existingAsset) {
              Write-Host "üóëÔ∏è Eliminando asset existente: $($existingAsset.name)"
              try {
                Invoke-RestMethod -Uri $existingAsset.url -Headers $headers -Method Delete
                Write-Host "‚úÖ Asset anterior eliminado"
              } catch {
                Write-Host "‚ö†Ô∏è No se pudo eliminar el asset anterior: $($_.Exception.Message)"
              }
            }

            echo "EXISTS=true" >> $env:GITHUB_OUTPUT
            echo "RELEASE_ID=$($response.id)" >> $env:GITHUB_OUTPUT
            echo "UPLOAD_URL=$($response.upload_url)" >> $env:GITHUB_OUTPUT
          } catch {
            if ($_.Exception.Response.StatusCode -eq 404) {
              Write-Host "‚úÖ El release $tagName no existe, se crear√° uno nuevo"
              echo "EXISTS=false" >> $env:GITHUB_OUTPUT
            } else {
              Write-Host "‚ùå Error al verificar el release: $($_.Exception.Message)"
              throw
            }
          }

      - name: Create GitHub Release / Pre-Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.check_release.outputs.EXISTS == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          release_name: "RealViewOn v${{ steps.get_version.outputs.VERSION }}"
          body: |
            # üöÄ RealViewOn Release v${{ steps.get_version.outputs.VERSION }}

            ## What's Changed
            ${{ steps.get_changelog.outputs.CHANGELOG }}

            ---
            *This is an automated $releaseType generated from the latest commit.*
            "@
              }
              draft = $false
              prerelease = -not $isStable
            } | ConvertTo-Json -Depth 3

            try {
              $response = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/$releaseId" -Headers $headers -Method Patch -Body $body
              Write-Host "‚úÖ Release actualizado exitosamente como $releaseType"
            } catch {
              Write-Host "‚ùå Error al actualizar release: $($_.Exception.Message)"
              throw
            }

            ---
            *This is an automated ${{ steps.get_version.outputs.IS_STABLE == 'True' && 'release' || 'pre-release' }} generated from the latest commit.*
          draft: false
          prerelease: ${{ steps.get_version.outputs.IS_STABLE != 'True' }}
        id: create_release

      - name: Update existing release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.check_release.outputs.EXISTS == 'true'
        run: |
          $releaseId = "${{ steps.check_release.outputs.RELEASE_ID }}"
          $tagName = "v${{ steps.get_version.outputs.VERSION }}"
          $isStable = "${{ steps.get_version.outputs.IS_STABLE }}" -eq "True"
          $releaseType = if ($isStable) { "release" } else { "pre-release" }

          Write-Host "üîÑ Actualizando release existente: $tagName (ID: $releaseId) como $releaseType"

          $headers = @{
            'Authorization' = 'token ${{ secrets.GITHUB_TOKEN }}'
            'Accept' = 'application/vnd.github.v3+json'
            'Content-Type' = 'application/json'
          }

          $body = @{
            tag_name = $tagName
            name = "${{ steps.get_version.outputs.VERSION }}üõ†Ô∏è"
            body = if ($isStable) {
              @"
          # Release v${{ steps.get_version.outputs.VERSION }} üöÄ

          ## What's Changed
          ${{ steps.get_changelog.outputs.CHANGELOG }}

          ---
          *This is an automated $releaseType generated from the latest commit.*
          "@
            } else {
              @"
          # üõë Pre-Release v${{ steps.get_version.outputs.VERSION }} üõë

          ## What's Changed
          ${{ steps.get_changelog.outputs.CHANGELOG }}

          ---
          *This is an automated $releaseType generated from the latest commit.*
          "@
            }
            draft = $false
            prerelease = -not $isStable
          } | ConvertTo-Json -Depth 3

          try {
            $response = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/$releaseId" -Headers $headers -Method Patch -Body $body
            Write-Host "‚úÖ Release actualizado exitosamente como $releaseType"
          } catch {
            Write-Host "‚ùå Error al actualizar release: $($_.Exception.Message)"
            throw
          }

      - name: Upload Release Asset
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          $uploadUrl = if ("${{ steps.check_release.outputs.EXISTS }}" -eq "true") {
            "${{ steps.check_release.outputs.UPLOAD_URL }}"
          } else {
            "${{ steps.create_release.outputs.upload_url }}"
          }

          Write-Host "üì§ URL base recibida: $uploadUrl"

          # Remover {?name,label} del upload_url si est√° presente
          $uploadUrl = $uploadUrl -replace '\{\?.*\}', ''
          $uploadUrl = "$uploadUrl" + "?name=RealViewOn.exe"

          Write-Host "üì§ URL final para subir: $uploadUrl"

          $headers = @{
            'Authorization' = 'token ${{ secrets.GITHUB_TOKEN }}'
            'Content-Type' = 'application/octet-stream'
          }

          try {
            $filePath = "x64\Release\RealViewOn.exe"

            # Verificar que el archivo existe
            if (-not (Test-Path $filePath)) {
              throw "El archivo $filePath no existe"
            }

            $fileBytes = [System.IO.File]::ReadAllBytes($filePath)
            Write-Host "üì¶ Archivo cargado: $([math]::Round($fileBytes.Length/1MB, 2)) MB"

            $response = Invoke-RestMethod -Uri $uploadUrl -Method Post -Headers $headers -Body $fileBytes
            Write-Host "‚úÖ Asset subido exitosamente: $($response.name)"
          } catch {
            Write-Host "‚ùå Error al subir asset: $($_.Exception.Message)"
            Write-Host "üîç Detalles del error: $($_.Exception.Response.StatusCode) - $($_.Exception.Response.StatusDescription)"
            throw
          }
